# Generated by Django 5.2 on 2025-05-03 21:20

import apps.core.models
import django.db.models.deletion
import pgvector.django.vector
from pgvector.django import VectorExtension
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Index',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128)),
                ('user', models.ForeignKey(help_text='Which user owns the index', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndexFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(help_text='The file uploaded for the index', upload_to=apps.core.models.get_index_file_location)),
                ('original_filename', models.CharField(help_text='The original filename uploaded by the user', max_length=255)),
                ('index', models.ForeignKey(help_text='Which index the file belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='files', to='core.index')),
            ],
            options={
                'abstract': False,
            },
        ),
        VectorExtension(), # Install vector extension in database
        migrations.CreateModel(
            name='IndexNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(help_text='Content of the node, consisting of few sentences from the document.')),
                ('embedding', pgvector.django.vector.VectorField(help_text='384 sized embedding for MniLM L6 V2.')),
                ('index_file', models.ForeignKey(help_text='The index file node is associated with', on_delete=django.db.models.deletion.PROTECT, related_name='nodes', to='core.indexfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndexQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('messages', models.JSONField(help_text='List of messages exchanged with the assistant.')),
                ('context_node_ids', models.JSONField(help_text='List of IndexNode IDs used as context for the query.')),
                ('index', models.ForeignKey(help_text='Reference to the Index related to this query.', on_delete=django.db.models.deletion.PROTECT, related_name='queries', to='core.index')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task_id', models.CharField(help_text='Celery task ID', max_length=255)),
                ('task_name', models.CharField(help_text='Name of the task', max_length=255)),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('SUCCESS', 'SUCCESS'), ('FAILURE', 'FAILURE'), ('REVOKED', 'REVOKED')], default='PENDING', max_length=50)),
                ('result', models.TextField(blank=True, help_text='Text result or error message', null=True)),
                ('user', models.ForeignKey(help_text='User who initiated the task', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
